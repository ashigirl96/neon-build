name: build and deploy workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
env:
  VERSION: ${{ github.event.release.tag_name || inputs.version || '0.0.0' }}
defaults:
  run:
    shell: bash

jobs:
  build:
    permissions:
      contents: write
    needs: config
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.config.outputs.includes) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: set up ${{ matrix.target }} for Linux
        uses: ./.github/actions/rust-toolchain-from-file
        with:
          targets: ${{ matrix.target }}
      - name: Install cross compiler for aarch64-unknown-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      - name: Install cargo-edit
        run: cargo binstall cargo-edit@^0.11 --no-confirm --log-level debug
      - name: cache target
        uses: Swatinem/rust-cache@v2
      - name: Build binary
        id: build-index
        run: |
          # TODO: ディレクトリ移動
          npm install
          ls -la
          file index.node
          mv index.node index-${{ matrix.artifact_name }}.node
          echo "index=index-${{ matrix.artifact_name }}.node" >> "$GITHUB_OUTPUT"
      - name: Upload index.node to Release
        if: fromJson(needs.config.outputs.deploy)
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.VERSION }}
          files: |-
            ${{ steps.build-index.outputs.index }}
          target_commitish: ${{ github.sha }}
      # - name: Upload artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ matrix.artifact_name }}
      #     path: path/to/binary/${{ matrix.artifact_name }}
  config: # 全 jobs で利用する定数の定義。実行対象の条件をフィルタリングする。
    runs-on: ubuntu-latest
    outputs:
      includes: ${{ steps.strategy_matrix.outputs.includes }}
      deploy: ${{ env.VERSION != '0.0.0' }}
      version: ${{ env.VERSION }}
    steps:
      - name: declare strategy matrix
        id: strategy_matrix
        # MacはM1対応が必要なので、現状はビルド対象から外しています。rustupのタイミングでx86-64としてインストールされてしまう
        #             {
        #              "os": "macos-12",
        #              "target": "aarch64-apple-darwin",
        #              "artifact_name": "osx-arm64-cpu"
        #            }
        run: |
          includes='[
            {
              "os": "ubuntu-20.04",
              "target": "x86_64-unknown-linux-gnu",
              "artifact_name": "linux-x64-cpu"
            },
            {
              "os": "ubuntu-20.04",
              "target": "aarch64-unknown-linux-gnu",
              "artifact_name": "linux-arm64-cpu"
            },
          ]'

          includes=$(echo "$includes" | jq -c '[.[] | del(.can_skip_in_simple_test)]')
          echo "includes=${includes}" >> "$GITHUB_OUTPUT"
