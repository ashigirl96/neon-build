name: build and deploy workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
env:
  VERSION: ${{ github.event.release.tag_name || inputs.version || '0.0.0' }}
defaults:
  run:
    shell: bash

jobs:
  build:
    permissions:
      contents: write
    needs: config
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.config.outputs.includes) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: set up ${{ matrix.target }} for Linux
        uses: ./.github/actions/rust-toolchain-from-file
        with:
          targets: ${{ matrix.target }}
      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      - name: Install cargo-edit
        run: cargo binstall cargo-edit@^0.11 --no-confirm --log-level debug
      - name: cache target
        uses: Swatinem/rust-cache@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@voicevox-node-api'
      - run: npm install
      - name: Build binary
        id: build-index
        run: |
          npm install
          ls -la ./dist
      - name: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm publish
      #     echo "index=index.node" >> "$GITHUB_OUTPUT"
      # - name: Upload index.node to Release
      #   if: fromJson(needs.config.outputs.deploy)
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     prerelease: true
      #     tag_name: ${{ env.VERSION }}
      #     files: |-
      #       ${{ steps.build-index.outputs.index }}
      #     target_commitish: ${{ github.sha }}

  config: # 全 jobs で利用する定数の定義。実行対象の条件をフィルタリングする。
    runs-on: ubuntu-latest
    outputs:
      includes: ${{ steps.strategy_matrix.outputs.includes }}
      deploy: ${{ env.VERSION != '0.0.0' }}
      version: ${{ env.VERSION }}
    steps:
      - name: declare strategy matrix
        id: strategy_matrix
        run: |
          includes='[
            {
              "os": "ubuntu-20.04",
              "target": "x86_64-unknown-linux-gnu",
              "artifact_name": "linux-x64-cpu"
            }
          ]'

          includes=$(echo "$includes" | jq -c '[.[] | del(.can_skip_in_simple_test)]')
          echo "includes=${includes}" >> "$GITHUB_OUTPUT"
